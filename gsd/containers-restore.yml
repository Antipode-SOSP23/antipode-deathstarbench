---
- hosts: all
  gather_facts: no
  become: no
  any_errors_fatal: true

  tasks:
    - name: Check if Docker is installed
      command: sudo docker --version
      register: docker_valid
      ignore_errors: yes

- hosts: swarm_manager
  gather_facts: no
  become: no
  any_errors_fatal: true

  tasks:
    - name: Create containers folder
      file:
        path: "{{ deploy_nas_path }}/container-images"
        state: directory

    - name: Uploading containers tars to NAS
      synchronize:
        src: "{{ local_containers_path }}/"
        dest: "{{ deploy_nas_path }}/container-images"
        # use_ssh_args: yes
        mode: push
        rsync_opts:
          - '--delete'

    - name: Pre-pull public docker images
      shell: >
        sudo docker pull {{ item }}
      with_items:
        - portainer/agent:latest
        - portainer/portainer-ce:latest
        - prom/pushgateway:latest
        - prom/prometheus:latest

- hosts: cluster
  gather_facts: no
  become: no
  any_errors_fatal: true

  tasks:
    - name: Restore the container images
      shell: >
        sudo docker load --input {{ item }}.tar
      args:
        chdir: "{{ deploy_nas_path }}/container-images"
      with_items:
        - "{{ services_containers_tars }}"

    # - name: validate that the images exists
    #   shell: >
    #     sudo docker image inspect {{ item }}
    #   args:
    #     chdir: "{{ deploy_nas_path }}/container-images"
    #   with_items:
    #     - "{{ services_containers_images }}"

    - name: Pre-pull public docker images
      shell: >
        sudo docker pull {{ item }}
      with_items:
        - jaegertracing/all-in-one:latest
        - jonathanmace/xtrace-server:latest
        - memcached:latest
        - mongo:4.4.6
        - mrvautin/adminmongo:latest
        - rabbitmq:3.8
        - rabbitmq:3.8-management
        - redis:latest
        - prom/pushgateway:latest
        - prom/prometheus:latest
        - yg397/media-frontend:xenial

- hosts: clients
  gather_facts: no
  become: no
  any_errors_fatal: true

  tasks:
    - name: Restore the container images
      shell: >
        sudo docker load --input {{ item }}.tar
      args:
        chdir: "{{ deploy_nas_path }}/container-images"
      with_items:
        - "{{ clients_containers_tars }}"

    # - name: validate that the images exists
    #   shell: >
    #     sudo docker image inspect {{ item }}
    #   args:
    #     chdir: "{{ deploy_nas_path }}/container-images"
    #   with_items:
    #     - "{{ clients_containers_images }}"
