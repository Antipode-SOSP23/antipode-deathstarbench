/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ComposeReviewService_H
#define ComposeReviewService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "media_service_types.h"

namespace media_service {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ComposeReviewServiceIf {
 public:
  virtual ~ComposeReviewServiceIf() {}
  virtual void UploadText(BaseRpcResponse& _return, const int64_t req_id, const std::string& text, const std::map<std::string, std::string> & carrier) = 0;
  virtual void UploadRating(BaseRpcResponse& _return, const int64_t req_id, const int32_t rating, const std::map<std::string, std::string> & carrier) = 0;
  virtual void UploadMovieId(BaseRpcResponse& _return, const int64_t req_id, const std::string& movie_id, const std::map<std::string, std::string> & carrier) = 0;
  virtual void UploadUniqueId(BaseRpcResponse& _return, const int64_t req_id, const int64_t unique_id, const std::map<std::string, std::string> & carrier) = 0;
  virtual void UploadUserId(BaseRpcResponse& _return, const int64_t req_id, const int64_t user_id, const std::map<std::string, std::string> & carrier) = 0;
};

class ComposeReviewServiceIfFactory {
 public:
  typedef ComposeReviewServiceIf Handler;

  virtual ~ComposeReviewServiceIfFactory() {}

  virtual ComposeReviewServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ComposeReviewServiceIf* /* handler */) = 0;
};

class ComposeReviewServiceIfSingletonFactory : virtual public ComposeReviewServiceIfFactory {
 public:
  ComposeReviewServiceIfSingletonFactory(const ::std::shared_ptr<ComposeReviewServiceIf>& iface) : iface_(iface) {}
  virtual ~ComposeReviewServiceIfSingletonFactory() {}

  virtual ComposeReviewServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ComposeReviewServiceIf* /* handler */) {}

 protected:
  ::std::shared_ptr<ComposeReviewServiceIf> iface_;
};

class ComposeReviewServiceNull : virtual public ComposeReviewServiceIf {
 public:
  virtual ~ComposeReviewServiceNull() {}
  void UploadText(BaseRpcResponse& /* _return */, const int64_t /* req_id */, const std::string& /* text */, const std::map<std::string, std::string> & /* carrier */) {
    return;
  }
  void UploadRating(BaseRpcResponse& /* _return */, const int64_t /* req_id */, const int32_t /* rating */, const std::map<std::string, std::string> & /* carrier */) {
    return;
  }
  void UploadMovieId(BaseRpcResponse& /* _return */, const int64_t /* req_id */, const std::string& /* movie_id */, const std::map<std::string, std::string> & /* carrier */) {
    return;
  }
  void UploadUniqueId(BaseRpcResponse& /* _return */, const int64_t /* req_id */, const int64_t /* unique_id */, const std::map<std::string, std::string> & /* carrier */) {
    return;
  }
  void UploadUserId(BaseRpcResponse& /* _return */, const int64_t /* req_id */, const int64_t /* user_id */, const std::map<std::string, std::string> & /* carrier */) {
    return;
  }
};

typedef struct _ComposeReviewService_UploadText_args__isset {
  _ComposeReviewService_UploadText_args__isset() : req_id(false), text(false), carrier(false) {}
  bool req_id :1;
  bool text :1;
  bool carrier :1;
} _ComposeReviewService_UploadText_args__isset;

class ComposeReviewService_UploadText_args {
 public:

  ComposeReviewService_UploadText_args(const ComposeReviewService_UploadText_args&);
  ComposeReviewService_UploadText_args& operator=(const ComposeReviewService_UploadText_args&);
  ComposeReviewService_UploadText_args() : req_id(0), text() {
  }

  virtual ~ComposeReviewService_UploadText_args() noexcept;
  int64_t req_id;
  std::string text;
  std::map<std::string, std::string>  carrier;

  _ComposeReviewService_UploadText_args__isset __isset;

  void __set_req_id(const int64_t val);

  void __set_text(const std::string& val);

  void __set_carrier(const std::map<std::string, std::string> & val);

  bool operator == (const ComposeReviewService_UploadText_args & rhs) const
  {
    if (!(req_id == rhs.req_id))
      return false;
    if (!(text == rhs.text))
      return false;
    if (!(carrier == rhs.carrier))
      return false;
    return true;
  }
  bool operator != (const ComposeReviewService_UploadText_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ComposeReviewService_UploadText_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ComposeReviewService_UploadText_pargs {
 public:


  virtual ~ComposeReviewService_UploadText_pargs() noexcept;
  const int64_t* req_id;
  const std::string* text;
  const std::map<std::string, std::string> * carrier;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ComposeReviewService_UploadText_result__isset {
  _ComposeReviewService_UploadText_result__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _ComposeReviewService_UploadText_result__isset;

class ComposeReviewService_UploadText_result {
 public:

  ComposeReviewService_UploadText_result(const ComposeReviewService_UploadText_result&);
  ComposeReviewService_UploadText_result& operator=(const ComposeReviewService_UploadText_result&);
  ComposeReviewService_UploadText_result() {
  }

  virtual ~ComposeReviewService_UploadText_result() noexcept;
  BaseRpcResponse success;
  ServiceException se;

  _ComposeReviewService_UploadText_result__isset __isset;

  void __set_success(const BaseRpcResponse& val);

  void __set_se(const ServiceException& val);

  bool operator == (const ComposeReviewService_UploadText_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const ComposeReviewService_UploadText_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ComposeReviewService_UploadText_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ComposeReviewService_UploadText_presult__isset {
  _ComposeReviewService_UploadText_presult__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _ComposeReviewService_UploadText_presult__isset;

class ComposeReviewService_UploadText_presult {
 public:


  virtual ~ComposeReviewService_UploadText_presult() noexcept;
  BaseRpcResponse* success;
  ServiceException se;

  _ComposeReviewService_UploadText_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ComposeReviewService_UploadRating_args__isset {
  _ComposeReviewService_UploadRating_args__isset() : req_id(false), rating(false), carrier(false) {}
  bool req_id :1;
  bool rating :1;
  bool carrier :1;
} _ComposeReviewService_UploadRating_args__isset;

class ComposeReviewService_UploadRating_args {
 public:

  ComposeReviewService_UploadRating_args(const ComposeReviewService_UploadRating_args&);
  ComposeReviewService_UploadRating_args& operator=(const ComposeReviewService_UploadRating_args&);
  ComposeReviewService_UploadRating_args() : req_id(0), rating(0) {
  }

  virtual ~ComposeReviewService_UploadRating_args() noexcept;
  int64_t req_id;
  int32_t rating;
  std::map<std::string, std::string>  carrier;

  _ComposeReviewService_UploadRating_args__isset __isset;

  void __set_req_id(const int64_t val);

  void __set_rating(const int32_t val);

  void __set_carrier(const std::map<std::string, std::string> & val);

  bool operator == (const ComposeReviewService_UploadRating_args & rhs) const
  {
    if (!(req_id == rhs.req_id))
      return false;
    if (!(rating == rhs.rating))
      return false;
    if (!(carrier == rhs.carrier))
      return false;
    return true;
  }
  bool operator != (const ComposeReviewService_UploadRating_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ComposeReviewService_UploadRating_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ComposeReviewService_UploadRating_pargs {
 public:


  virtual ~ComposeReviewService_UploadRating_pargs() noexcept;
  const int64_t* req_id;
  const int32_t* rating;
  const std::map<std::string, std::string> * carrier;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ComposeReviewService_UploadRating_result__isset {
  _ComposeReviewService_UploadRating_result__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _ComposeReviewService_UploadRating_result__isset;

class ComposeReviewService_UploadRating_result {
 public:

  ComposeReviewService_UploadRating_result(const ComposeReviewService_UploadRating_result&);
  ComposeReviewService_UploadRating_result& operator=(const ComposeReviewService_UploadRating_result&);
  ComposeReviewService_UploadRating_result() {
  }

  virtual ~ComposeReviewService_UploadRating_result() noexcept;
  BaseRpcResponse success;
  ServiceException se;

  _ComposeReviewService_UploadRating_result__isset __isset;

  void __set_success(const BaseRpcResponse& val);

  void __set_se(const ServiceException& val);

  bool operator == (const ComposeReviewService_UploadRating_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const ComposeReviewService_UploadRating_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ComposeReviewService_UploadRating_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ComposeReviewService_UploadRating_presult__isset {
  _ComposeReviewService_UploadRating_presult__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _ComposeReviewService_UploadRating_presult__isset;

class ComposeReviewService_UploadRating_presult {
 public:


  virtual ~ComposeReviewService_UploadRating_presult() noexcept;
  BaseRpcResponse* success;
  ServiceException se;

  _ComposeReviewService_UploadRating_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ComposeReviewService_UploadMovieId_args__isset {
  _ComposeReviewService_UploadMovieId_args__isset() : req_id(false), movie_id(false), carrier(false) {}
  bool req_id :1;
  bool movie_id :1;
  bool carrier :1;
} _ComposeReviewService_UploadMovieId_args__isset;

class ComposeReviewService_UploadMovieId_args {
 public:

  ComposeReviewService_UploadMovieId_args(const ComposeReviewService_UploadMovieId_args&);
  ComposeReviewService_UploadMovieId_args& operator=(const ComposeReviewService_UploadMovieId_args&);
  ComposeReviewService_UploadMovieId_args() : req_id(0), movie_id() {
  }

  virtual ~ComposeReviewService_UploadMovieId_args() noexcept;
  int64_t req_id;
  std::string movie_id;
  std::map<std::string, std::string>  carrier;

  _ComposeReviewService_UploadMovieId_args__isset __isset;

  void __set_req_id(const int64_t val);

  void __set_movie_id(const std::string& val);

  void __set_carrier(const std::map<std::string, std::string> & val);

  bool operator == (const ComposeReviewService_UploadMovieId_args & rhs) const
  {
    if (!(req_id == rhs.req_id))
      return false;
    if (!(movie_id == rhs.movie_id))
      return false;
    if (!(carrier == rhs.carrier))
      return false;
    return true;
  }
  bool operator != (const ComposeReviewService_UploadMovieId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ComposeReviewService_UploadMovieId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ComposeReviewService_UploadMovieId_pargs {
 public:


  virtual ~ComposeReviewService_UploadMovieId_pargs() noexcept;
  const int64_t* req_id;
  const std::string* movie_id;
  const std::map<std::string, std::string> * carrier;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ComposeReviewService_UploadMovieId_result__isset {
  _ComposeReviewService_UploadMovieId_result__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _ComposeReviewService_UploadMovieId_result__isset;

class ComposeReviewService_UploadMovieId_result {
 public:

  ComposeReviewService_UploadMovieId_result(const ComposeReviewService_UploadMovieId_result&);
  ComposeReviewService_UploadMovieId_result& operator=(const ComposeReviewService_UploadMovieId_result&);
  ComposeReviewService_UploadMovieId_result() {
  }

  virtual ~ComposeReviewService_UploadMovieId_result() noexcept;
  BaseRpcResponse success;
  ServiceException se;

  _ComposeReviewService_UploadMovieId_result__isset __isset;

  void __set_success(const BaseRpcResponse& val);

  void __set_se(const ServiceException& val);

  bool operator == (const ComposeReviewService_UploadMovieId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const ComposeReviewService_UploadMovieId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ComposeReviewService_UploadMovieId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ComposeReviewService_UploadMovieId_presult__isset {
  _ComposeReviewService_UploadMovieId_presult__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _ComposeReviewService_UploadMovieId_presult__isset;

class ComposeReviewService_UploadMovieId_presult {
 public:


  virtual ~ComposeReviewService_UploadMovieId_presult() noexcept;
  BaseRpcResponse* success;
  ServiceException se;

  _ComposeReviewService_UploadMovieId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ComposeReviewService_UploadUniqueId_args__isset {
  _ComposeReviewService_UploadUniqueId_args__isset() : req_id(false), unique_id(false), carrier(false) {}
  bool req_id :1;
  bool unique_id :1;
  bool carrier :1;
} _ComposeReviewService_UploadUniqueId_args__isset;

class ComposeReviewService_UploadUniqueId_args {
 public:

  ComposeReviewService_UploadUniqueId_args(const ComposeReviewService_UploadUniqueId_args&);
  ComposeReviewService_UploadUniqueId_args& operator=(const ComposeReviewService_UploadUniqueId_args&);
  ComposeReviewService_UploadUniqueId_args() : req_id(0), unique_id(0) {
  }

  virtual ~ComposeReviewService_UploadUniqueId_args() noexcept;
  int64_t req_id;
  int64_t unique_id;
  std::map<std::string, std::string>  carrier;

  _ComposeReviewService_UploadUniqueId_args__isset __isset;

  void __set_req_id(const int64_t val);

  void __set_unique_id(const int64_t val);

  void __set_carrier(const std::map<std::string, std::string> & val);

  bool operator == (const ComposeReviewService_UploadUniqueId_args & rhs) const
  {
    if (!(req_id == rhs.req_id))
      return false;
    if (!(unique_id == rhs.unique_id))
      return false;
    if (!(carrier == rhs.carrier))
      return false;
    return true;
  }
  bool operator != (const ComposeReviewService_UploadUniqueId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ComposeReviewService_UploadUniqueId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ComposeReviewService_UploadUniqueId_pargs {
 public:


  virtual ~ComposeReviewService_UploadUniqueId_pargs() noexcept;
  const int64_t* req_id;
  const int64_t* unique_id;
  const std::map<std::string, std::string> * carrier;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ComposeReviewService_UploadUniqueId_result__isset {
  _ComposeReviewService_UploadUniqueId_result__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _ComposeReviewService_UploadUniqueId_result__isset;

class ComposeReviewService_UploadUniqueId_result {
 public:

  ComposeReviewService_UploadUniqueId_result(const ComposeReviewService_UploadUniqueId_result&);
  ComposeReviewService_UploadUniqueId_result& operator=(const ComposeReviewService_UploadUniqueId_result&);
  ComposeReviewService_UploadUniqueId_result() {
  }

  virtual ~ComposeReviewService_UploadUniqueId_result() noexcept;
  BaseRpcResponse success;
  ServiceException se;

  _ComposeReviewService_UploadUniqueId_result__isset __isset;

  void __set_success(const BaseRpcResponse& val);

  void __set_se(const ServiceException& val);

  bool operator == (const ComposeReviewService_UploadUniqueId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const ComposeReviewService_UploadUniqueId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ComposeReviewService_UploadUniqueId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ComposeReviewService_UploadUniqueId_presult__isset {
  _ComposeReviewService_UploadUniqueId_presult__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _ComposeReviewService_UploadUniqueId_presult__isset;

class ComposeReviewService_UploadUniqueId_presult {
 public:


  virtual ~ComposeReviewService_UploadUniqueId_presult() noexcept;
  BaseRpcResponse* success;
  ServiceException se;

  _ComposeReviewService_UploadUniqueId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ComposeReviewService_UploadUserId_args__isset {
  _ComposeReviewService_UploadUserId_args__isset() : req_id(false), user_id(false), carrier(false) {}
  bool req_id :1;
  bool user_id :1;
  bool carrier :1;
} _ComposeReviewService_UploadUserId_args__isset;

class ComposeReviewService_UploadUserId_args {
 public:

  ComposeReviewService_UploadUserId_args(const ComposeReviewService_UploadUserId_args&);
  ComposeReviewService_UploadUserId_args& operator=(const ComposeReviewService_UploadUserId_args&);
  ComposeReviewService_UploadUserId_args() : req_id(0), user_id(0) {
  }

  virtual ~ComposeReviewService_UploadUserId_args() noexcept;
  int64_t req_id;
  int64_t user_id;
  std::map<std::string, std::string>  carrier;

  _ComposeReviewService_UploadUserId_args__isset __isset;

  void __set_req_id(const int64_t val);

  void __set_user_id(const int64_t val);

  void __set_carrier(const std::map<std::string, std::string> & val);

  bool operator == (const ComposeReviewService_UploadUserId_args & rhs) const
  {
    if (!(req_id == rhs.req_id))
      return false;
    if (!(user_id == rhs.user_id))
      return false;
    if (!(carrier == rhs.carrier))
      return false;
    return true;
  }
  bool operator != (const ComposeReviewService_UploadUserId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ComposeReviewService_UploadUserId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ComposeReviewService_UploadUserId_pargs {
 public:


  virtual ~ComposeReviewService_UploadUserId_pargs() noexcept;
  const int64_t* req_id;
  const int64_t* user_id;
  const std::map<std::string, std::string> * carrier;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ComposeReviewService_UploadUserId_result__isset {
  _ComposeReviewService_UploadUserId_result__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _ComposeReviewService_UploadUserId_result__isset;

class ComposeReviewService_UploadUserId_result {
 public:

  ComposeReviewService_UploadUserId_result(const ComposeReviewService_UploadUserId_result&);
  ComposeReviewService_UploadUserId_result& operator=(const ComposeReviewService_UploadUserId_result&);
  ComposeReviewService_UploadUserId_result() {
  }

  virtual ~ComposeReviewService_UploadUserId_result() noexcept;
  BaseRpcResponse success;
  ServiceException se;

  _ComposeReviewService_UploadUserId_result__isset __isset;

  void __set_success(const BaseRpcResponse& val);

  void __set_se(const ServiceException& val);

  bool operator == (const ComposeReviewService_UploadUserId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const ComposeReviewService_UploadUserId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ComposeReviewService_UploadUserId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ComposeReviewService_UploadUserId_presult__isset {
  _ComposeReviewService_UploadUserId_presult__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _ComposeReviewService_UploadUserId_presult__isset;

class ComposeReviewService_UploadUserId_presult {
 public:


  virtual ~ComposeReviewService_UploadUserId_presult() noexcept;
  BaseRpcResponse* success;
  ServiceException se;

  _ComposeReviewService_UploadUserId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ComposeReviewServiceClient : virtual public ComposeReviewServiceIf {
 public:
  ComposeReviewServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ComposeReviewServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void UploadText(BaseRpcResponse& _return, const int64_t req_id, const std::string& text, const std::map<std::string, std::string> & carrier);
  void send_UploadText(const int64_t req_id, const std::string& text, const std::map<std::string, std::string> & carrier);
  void recv_UploadText(BaseRpcResponse& _return);
  void UploadRating(BaseRpcResponse& _return, const int64_t req_id, const int32_t rating, const std::map<std::string, std::string> & carrier);
  void send_UploadRating(const int64_t req_id, const int32_t rating, const std::map<std::string, std::string> & carrier);
  void recv_UploadRating(BaseRpcResponse& _return);
  void UploadMovieId(BaseRpcResponse& _return, const int64_t req_id, const std::string& movie_id, const std::map<std::string, std::string> & carrier);
  void send_UploadMovieId(const int64_t req_id, const std::string& movie_id, const std::map<std::string, std::string> & carrier);
  void recv_UploadMovieId(BaseRpcResponse& _return);
  void UploadUniqueId(BaseRpcResponse& _return, const int64_t req_id, const int64_t unique_id, const std::map<std::string, std::string> & carrier);
  void send_UploadUniqueId(const int64_t req_id, const int64_t unique_id, const std::map<std::string, std::string> & carrier);
  void recv_UploadUniqueId(BaseRpcResponse& _return);
  void UploadUserId(BaseRpcResponse& _return, const int64_t req_id, const int64_t user_id, const std::map<std::string, std::string> & carrier);
  void send_UploadUserId(const int64_t req_id, const int64_t user_id, const std::map<std::string, std::string> & carrier);
  void recv_UploadUserId(BaseRpcResponse& _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ComposeReviewServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<ComposeReviewServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ComposeReviewServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_UploadText(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UploadRating(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UploadMovieId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UploadUniqueId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UploadUserId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ComposeReviewServiceProcessor(::std::shared_ptr<ComposeReviewServiceIf> iface) :
    iface_(iface) {
    processMap_["UploadText"] = &ComposeReviewServiceProcessor::process_UploadText;
    processMap_["UploadRating"] = &ComposeReviewServiceProcessor::process_UploadRating;
    processMap_["UploadMovieId"] = &ComposeReviewServiceProcessor::process_UploadMovieId;
    processMap_["UploadUniqueId"] = &ComposeReviewServiceProcessor::process_UploadUniqueId;
    processMap_["UploadUserId"] = &ComposeReviewServiceProcessor::process_UploadUserId;
  }

  virtual ~ComposeReviewServiceProcessor() {}
};

class ComposeReviewServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ComposeReviewServiceProcessorFactory(const ::std::shared_ptr< ComposeReviewServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< ComposeReviewServiceIfFactory > handlerFactory_;
};

class ComposeReviewServiceMultiface : virtual public ComposeReviewServiceIf {
 public:
  ComposeReviewServiceMultiface(std::vector<std::shared_ptr<ComposeReviewServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ComposeReviewServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<ComposeReviewServiceIf> > ifaces_;
  ComposeReviewServiceMultiface() {}
  void add(::std::shared_ptr<ComposeReviewServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void UploadText(BaseRpcResponse& _return, const int64_t req_id, const std::string& text, const std::map<std::string, std::string> & carrier) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UploadText(_return, req_id, text, carrier);
    }
    ifaces_[i]->UploadText(_return, req_id, text, carrier);
    return;
  }

  void UploadRating(BaseRpcResponse& _return, const int64_t req_id, const int32_t rating, const std::map<std::string, std::string> & carrier) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UploadRating(_return, req_id, rating, carrier);
    }
    ifaces_[i]->UploadRating(_return, req_id, rating, carrier);
    return;
  }

  void UploadMovieId(BaseRpcResponse& _return, const int64_t req_id, const std::string& movie_id, const std::map<std::string, std::string> & carrier) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UploadMovieId(_return, req_id, movie_id, carrier);
    }
    ifaces_[i]->UploadMovieId(_return, req_id, movie_id, carrier);
    return;
  }

  void UploadUniqueId(BaseRpcResponse& _return, const int64_t req_id, const int64_t unique_id, const std::map<std::string, std::string> & carrier) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UploadUniqueId(_return, req_id, unique_id, carrier);
    }
    ifaces_[i]->UploadUniqueId(_return, req_id, unique_id, carrier);
    return;
  }

  void UploadUserId(BaseRpcResponse& _return, const int64_t req_id, const int64_t user_id, const std::map<std::string, std::string> & carrier) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UploadUserId(_return, req_id, user_id, carrier);
    }
    ifaces_[i]->UploadUserId(_return, req_id, user_id, carrier);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ComposeReviewServiceConcurrentClient : virtual public ComposeReviewServiceIf {
 public:
  ComposeReviewServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  ComposeReviewServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void UploadText(BaseRpcResponse& _return, const int64_t req_id, const std::string& text, const std::map<std::string, std::string> & carrier);
  int32_t send_UploadText(const int64_t req_id, const std::string& text, const std::map<std::string, std::string> & carrier);
  void recv_UploadText(BaseRpcResponse& _return, const int32_t seqid);
  void UploadRating(BaseRpcResponse& _return, const int64_t req_id, const int32_t rating, const std::map<std::string, std::string> & carrier);
  int32_t send_UploadRating(const int64_t req_id, const int32_t rating, const std::map<std::string, std::string> & carrier);
  void recv_UploadRating(BaseRpcResponse& _return, const int32_t seqid);
  void UploadMovieId(BaseRpcResponse& _return, const int64_t req_id, const std::string& movie_id, const std::map<std::string, std::string> & carrier);
  int32_t send_UploadMovieId(const int64_t req_id, const std::string& movie_id, const std::map<std::string, std::string> & carrier);
  void recv_UploadMovieId(BaseRpcResponse& _return, const int32_t seqid);
  void UploadUniqueId(BaseRpcResponse& _return, const int64_t req_id, const int64_t unique_id, const std::map<std::string, std::string> & carrier);
  int32_t send_UploadUniqueId(const int64_t req_id, const int64_t unique_id, const std::map<std::string, std::string> & carrier);
  void recv_UploadUniqueId(BaseRpcResponse& _return, const int32_t seqid);
  void UploadUserId(BaseRpcResponse& _return, const int64_t req_id, const int64_t user_id, const std::map<std::string, std::string> & carrier);
  int32_t send_UploadUserId(const int64_t req_id, const int64_t user_id, const std::map<std::string, std::string> & carrier);
  void recv_UploadUserId(BaseRpcResponse& _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
