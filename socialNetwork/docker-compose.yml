version: "3"
services:
  # Resolving container hostnames from host machine
  # CAUTION: could affect host machine networking
  #  dns-social-network:
  #    image: defreitas/dns-proxy-server
  #    volumes:
  #      - /opt/dns-proxy-server/conf:/app/conf
  #      - /var/run/docker.sock:/var/run/docker.sock
  #      - /etc/resolv.conf:/etc/resolv.conf

  #----------------------------------------------------------
  # Write notifications at EU replica
  #----------------------------------------------------------
  social-graph-service:
    image: yg397/social-network-microservices:antipode
    hostname: social-graph-service
    # ports:
      # - 10000:9090
    restart: always
    entrypoint: SocialGraphService
    deploy:
      placement:
        constraints: [node.hostname == node02]

  social-graph-mongodb:
    image: mongo
    hostname: social-graph-mongodb
    # ports:
      # - 27018:27017
    restart: always
    deploy:
      placement:
        constraints: [node.hostname == node02]

  social-graph-redis:
    image: redis
    hostname: social-graph-redis
    # ports:
      # - 6380:6379
    restart: always
    deploy:
      placement:
        constraints: [node.hostname == node02]

  write-home-timeline-service:
    image: yg397/social-network-microservices:antipode
    hostname: write-home-timeline-service
    restart: always
    entrypoint: WriteHomeTimelineService
    depends_on:
      - write-home-timeline-rabbitmq
    deploy:
      placement:
        constraints: [node.hostname == node02]

  write-home-timeline-rabbitmq:
    image: rabbitmq
    hostname: write-home-timeline-rabbitmq
    environment:
      RABBITMQ_ERLANG_COOKIE: "WRITE-HOME-TIMELINE-RABBITMQ"
      RABBITMQ_DEFAULT_VHOST: "/"
    # ports:
      # - 15672:15672
      # - 5672:5672
    restart: always
    deploy:
      placement:
        constraints: [node.hostname == node02]

  home-timeline-redis:
    image: redis
    hostname: home-timeline-redis
    command: redis-server --port 6379
    # ports:
      # 6381:6379
    restart: always
    deploy:
      placement:
        constraints: [node.hostname == node02]

  #----------------------------------------------------------
  # read notifications at US replica
  #----------------------------------------------------------
  home-timeline-redis-us:
    image: redis
    hostname: home-timeline-redis-us
    # ports:
      # - 6381:6379
    command: redis-server --slaveof home-timeline-redis 6379 --replica-read-only no
    restart: always
    links:
      - home-timeline-redis
    deploy:
      placement:
        constraints: [node.hostname == node03]

  home-timeline-service:
    image: yg397/social-network-microservices:antipode
    hostname: home-timeline-service
    # ports:
      # - 10010:9090
    restart: always
    entrypoint: HomeTimelineService
    deploy:
      placement:
        constraints: [node.hostname == node03]

  #----------------------------------------------------------
  # write post at replica EU
  #----------------------------------------------------------
  post-storage-service:
    image: yg397/social-network-microservices:antipode
    hostname: post-storage-service
    # ports:
    #   - 10002:9090
    restart: always
    entrypoint: PostStorageService
    deploy:
      placement:
        constraints: [node.hostname == node04]

  post-storage-memcached:
    image: memcached
    hostname: post-storage-memcached
    # ports:
      # - 11212:11211
    restart: always
    deploy:
      placement:
        constraints: [node.hostname == node04]

  post-storage-mongodb:
    image: mongo
    hostname: post-storage-mongodb
    command: --replSet rs0 --oplogSize 128
    # ports:
    #   - 27019:27017
    restart: always
    deploy:
      placement:
        constraints: [node.hostname == node04]

  #----------------------------------------------------------
  # read post at US replica
  #----------------------------------------------------------
  post-storage-service-us:
    image: yg397/social-network-microservices:antipode
    hostname: post-storage-service-us
    # ports:
      # - 10002:9090
    restart: always
    entrypoint: PostStorageService
    environment:
      - ZONE=us
    deploy:
      placement:
        constraints: [node.hostname == node06]

  post-storage-memcached-us:
    image: memcached
    hostname: post-storage-memcached-us
    # ports:
      # - 11212:11211
    restart: always
    deploy:
      placement:
        constraints: [node.hostname == node06]

  post-storage-mongodb-us:
    image: mongo
    hostname: post-storage-mongodb-us
    command: --replSet rs0 --oplogSize 128
    # ports:
      # - 27018:27017
    restart: always
    deploy:
      placement:
        constraints: [node.hostname == node06]

  #----------------------------------------------------------
  # write posts EU
  #----------------------------------------------------------
  user-timeline-service:
    image: yg397/social-network-microservices:antipode
    hostname: user-timeline-service
    # ports:
      # - 10003:9090
    restart: always
    entrypoint: UserTimelineService
    deploy:
      placement:
        constraints: [node.hostname == node11]

  user-timeline-redis:
    image: redis
    hostname: user-timeline-redis
    # ports:
      # - 6383:6379
    restart: always
    deploy:
      placement:
        constraints: [node.hostname == node11]

  user-timeline-mongodb:
    image: mongo
    hostname: user-timeline-mongodb
    # ports:
      # - 27020:27017
    restart: always
    deploy:
      placement:
        constraints: [node.hostname == node11]

  compose-post-redis:
    image: redis
    hostname: compose-post-redis
    # ports:
      # - 6382:6379
    restart: always
    deploy:
      placement:
        constraints: [node.hostname == node11]

  compose-post-service:
    image: yg397/social-network-microservices:antipode
    hostname: compose-post-service
    # ports:
      # - 10001:9090
    restart: always
    entrypoint: ComposePostService
    depends_on:
      - write-home-timeline-rabbitmq
    deploy:
      placement:
        constraints: [node.hostname == node11]

  url-shorten-service:
    image: yg397/social-network-microservices:antipode
    hostname: url-shorten-service
    # ports:
      # - 10004:9090
    restart: always
    entrypoint: UrlShortenService
    deploy:
      placement:
        constraints: [node.hostname == node11]

  url-shorten-memcached:
    image: memcached
    hostname: url-shorten-memcached
    # ports:
      # - 11213:11211
    restart: always
    deploy:
      placement:
        constraints: [node.hostname == node11]

  url-shorten-mongodb:
    image: mongo
    hostname: url-shorten-mongodb
    # ports:
      # - 27021:27017
    restart: always
    deploy:
      placement:
        constraints: [node.hostname == node11]

  user-service:
    image: yg397/social-network-microservices:antipode
    hostname: user-service
    # ports:
      # - 10005:9090
    restart: always
    entrypoint: UserService
    deploy:
      placement:
        constraints: [node.hostname == node11]

  user-memcached:
    image: memcached
    hostname: user-memcached
    # ports:
      # - 11214:11211
    restart: always
    deploy:
      placement:
        constraints: [node.hostname == node11]

  user-mongodb:
    image: mongo
    hostname: user-mongodb
    # ports:
      # - 27023:27017
    restart: always
    deploy:
      placement:
        constraints: [node.hostname == node11]

  media-service:
    image: yg397/social-network-microservices:antipode
    hostname: media-service
    # ports:
      # - 10006:9090
    restart: always
    entrypoint: MediaService
    deploy:
      placement:
        constraints: [node.hostname == node11]

  media-memcached:
    image: memcached
    hostname: media-memcached
    # ports:
      # - 11215:11211
    restart: always
    deploy:
      placement:
        constraints: [node.hostname == node11]

  media-mongodb:
    image: mongo
    hostname: media-mongodb
    # ports:
      # - 27024:27017
    restart: always
    deploy:
      placement:
        constraints: [node.hostname == node11]

  media-frontend:
    image: yg397/media-frontend:xenial
    hostname: media-frontend
    ports:
      - 8081:8080
    restart: always
    volumes:
      - ./media-frontend/lua-scripts:/usr/local/openresty/nginx/lua-scripts
      - ./media-frontend/conf/nginx.conf:/usr/local/openresty/nginx/conf/nginx.conf
    deploy:
      placement:
        constraints: [node.hostname == node11]

  text-service:
    image: yg397/social-network-microservices:antipode
    hostname: text-service
    # ports:
      # - 10007:9090
    restart: always
    entrypoint: TextService
    deploy:
      placement:
        constraints: [node.hostname == node11]

  unique-id-service:
    image: yg397/social-network-microservices:antipode
    hostname: unique-id-service
    # ports:
      # - 10008:9090
    restart: always
    entrypoint: UniqueIdService
    deploy:
      placement:
        constraints: [node.hostname == node11]

  user-mention-service:
    image: yg397/social-network-microservices:antipode
    hostname: user-mention-service
    # ports:
      # - 10009:9090
    restart: always
    entrypoint: UserMentionService
    deploy:
      placement:
        constraints: [node.hostname == node11]

  #----------------------------------------------------------
  # Antipode Coordinator
  #----------------------------------------------------------
  antipode-oracle:
    image: yg397/social-network-microservices:antipode
    hostname: antipode-oracle
    # ports:
      # - 10001:9090
    restart: always
    entrypoint: /usr/local/bin/AntipodeOracle
    deploy:
      placement:
        constraints: [node.hostname == node22]

  #----------------------------------------------------------
  # Frontend EU
  #----------------------------------------------------------
  nginx-thrift:
    image: yg397/openresty-thrift:latest
    hostname: nginx-thrift
    ports:
      - 8080:8080
    restart: always
    volumes:
      - ./nginx-web-server/lua-scripts:/usr/local/openresty/nginx/lua-scripts
      - ./nginx-web-server/pages:/usr/local/openresty/nginx/pages
      - ./nginx-web-server/conf/nginx.conf:/usr/local/openresty/nginx/conf/nginx.conf
      - ./nginx-web-server/jaeger-config.json:/usr/local/openresty/nginx/jaeger-config.json
      - ./gen-lua:/gen-lua
    deploy:
      placement:
        constraints: [node.hostname == node23]

  #----------------------------------------------------------
  # Frontend US
  #----------------------------------------------------------
  nginx-thrift-us:
    image: yg397/openresty-thrift:latest
    hostname: nginx-thrift
    ports:
      - 8082:8080
    restart: always
    volumes:
      - ./nginx-web-server/lua-scripts:/usr/local/openresty/nginx/lua-scripts
      - ./nginx-web-server/pages:/usr/local/openresty/nginx/pages
      - ./nginx-web-server/conf/nginx.conf:/usr/local/openresty/nginx/conf/nginx.conf
      - ./nginx-web-server/jaeger-config.json:/usr/local/openresty/nginx/jaeger-config.json
      - ./gen-lua:/gen-lua
    deploy:
      placement:
        constraints: [node.hostname == node23]

  #----------------------------------------------------------
  # Admin tasks
  #----------------------------------------------------------
  jaeger:
    image: jaegertracing/all-in-one:latest
    hostname: jaeger
    ports:
      # - 5775:5775/udp
      # - 6831:6831/udp
      # - 6832:6832/udp
      # - 5778:5778
      - 16686:16686
      # - 14268:14268
      # - 9411:9411
    restart: always
    environment:
      - COLLECTOR_ZIPKIN_HTTP_PORT=9411
    deploy:
      placement:
        constraints: [node.hostname == node25]

  xtrace-server:
    image: jonathanmace/xtrace-server:latest
    hostname: xtrace-server
    ports:
      - 4080:4080
      - 5563:5563
    restart: always
    # disable logging for this container - too spammy
    logging:
      driver: none
    deploy:
      placement:
        constraints: [node.hostname == node25]

  mongodb-admin:
    image: mrvautin/adminmongo
    restart: always
    environment:
      - HOST=0.0.0.0
    ports:
      - 1234:1234
    deploy:
      placement:
        constraints: [node.hostname == node25]

  post-storage-mongodb-setup:
    image: mongodb-setup
    # build:
    #   context: ./docker/mongodb-setup/post-storage/
    #   dockerfile: Dockerfile
    depends_on:
      - post-storage-mongodb
      - post-storage-mongodb-us
    deploy:
      placement:
        constraints: [node.hostname == node25]